package com.durga.lambda.functionalinterface;
import com.durga.lambda.functionalinterface.interfaces.FunctionalInterfaceAccessingInstanceVariable;
import com.durga.lambda.functionalinterface.interfaces.FunctionalInterfaceWith1Parameter;
import com.durga.lambda.functionalinterface.interfaces.FunctionalInterfaceWithReturnType;
import com.durga.lambda.functionalinterface.interfaces.FunctionalInterfaceWithNoParameter;

public class LambdaFunctionalService {

    private FunctionalInterfaceWithNoParameter printWithNoParameter;
    private FunctionalInterfaceWith1Parameter printWithOneParameter;
    private FunctionalInterfaceWithReturnType printWithTwoParameter;
    private FunctionalInterfaceAccessingInstanceVariable printWithInstanceVariable;
    private int globalVariable=100;

    public void printFunctionalInterfaceWithAndWithoutLambda(){
        System.out.println("----------------------------------------Lambda : Functional Interface starts----------------------------------------");
        printWithoutPassingParameter();
        printWithPassingOneParameter();
        printWithPassingTwoParameter();
        printAfterAddingWithInstanceVariable();
        System.out.println("----------------------------------------Lambda : Functional Interface ends----------------------------------------");
    }

    private void printWithoutPassingParameter(){
        printWithoutParameterUsingNormalFlow();
        printWithoutParameterUsingLambdaFlow();
    }
    private void printWithPassingOneParameter(){
        String str="Please provide me String length";
        int ordinaryStrLength=printWithOneParameterUsingNormalFlow(str);
        int lambdaStrLength=printWithOneParameterUsingLambdaFlow(str);
        System.out.println("2. Length of Name generated by Usual way->"+ordinaryStrLength+" and calculated using Lambda way ->"+lambdaStrLength);
    }
    private void printWithPassingTwoParameter(){
        int a=10,b=15;
        int ordinarySum=printWithTwoParameterUsingNormalFlow(a,b);
        int lambdaSum=printWithTwoParameterUsingLambdaFlow(a,b);
        System.out.println("3. Sum calculated by Ususal way->"+ordinarySum+" and calculated using Lambda way->"+lambdaSum);
    }
    private void printAfterAddingWithInstanceVariable(){
        int a=10,b=15;
        int ordinarySum=printWithInstanceVariableUsingNormalFlow(10,15);
        int lamdaSum=printWithInstanceVariableUsingLambdaFlow(10,15);
        System.out.println("3.1 Sum calculated after adding instance variable by Ususal way->"+ordinarySum+" and calculated using Lambda way->"+lamdaSum);
    }

    private void printWithoutParameterUsingNormalFlow(){
        printWithNoParameter.printWithNoParameter();
    }
    //If there is only 1 line ,then braces is optional in lambda string
    private void printWithoutParameterUsingLambdaFlow(){
        FunctionalInterfaceWithNoParameter lambdaWithNoParameter=()->System.out.println("1.2 Printed using Functional Interface Invocation ---> Lambda way");
        lambdaWithNoParameter.printWithNoParameter();
    }


    private int printWithOneParameterUsingNormalFlow(String str){
        return printWithOneParameter.printStringLength(str);
    }
    //If only one parameter is passed,then No need to use paranthensis
    //Type Inference-where Compiler can automatically assume the dataType
    private int printWithOneParameterUsingLambdaFlow(String str){
        FunctionalInterfaceWith1Parameter lambdaWith1Method = stringInput->stringInput.length();
        return lambdaWith1Method.printStringLength(str);
    }

    private int printWithTwoParameterUsingNormalFlow(int a,int b){
        return printWithTwoParameter.printSumUsingOrdinaryMethod(a,b);
    }
    //No need to mention return statement explicitly
    //(a,b)-> System.out.println(a+b);
    private int printWithTwoParameterUsingLambdaFlow(int a,int b){
        FunctionalInterfaceWithReturnType lambdaWith2Method= (inputNumber1, inputNumber2)->inputNumber1+inputNumber2;
        return lambdaWith2Method.printSumUsingOrdinaryMethod(a,b);
    }

    private int printWithInstanceVariableUsingNormalFlow(int a,int b){
        return printWithInstanceVariable.threeSum(a,b)+this.globalVariable;
    }
    private int printWithInstanceVariableUsingLambdaFlow(int a,int b){
        FunctionalInterfaceAccessingInstanceVariable accessingInstanceVariable=(p1,p2) -> p1 + p2+this.globalVariable;
        return accessingInstanceVariable.threeSum(a,b);

    }
    public void setPrintWithNoParameter(FunctionalInterfaceWithNoParameter printWithNoParameter) {
        this.printWithNoParameter = printWithNoParameter;
    }
    public void setPrintWithOneParameter(FunctionalInterfaceWith1Parameter printWithOneParameter) {
        this.printWithOneParameter = printWithOneParameter;
    }
    public void setPrintWithTwoParameter(FunctionalInterfaceWithReturnType printWithTwoParameter) {
        this.printWithTwoParameter = printWithTwoParameter;
    }
    public void setPrintWithInstanceVariable(FunctionalInterfaceAccessingInstanceVariable printWithInstanceVariable) {
        this.printWithInstanceVariable = printWithInstanceVariable;
    }
}
